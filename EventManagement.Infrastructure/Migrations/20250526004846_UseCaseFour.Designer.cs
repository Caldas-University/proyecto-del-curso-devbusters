// <auto-generated />
using System;
using EventManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagement.Infrastructure.Migrations
{
    [DbContext(typeof(EventManagementDbContext))]
    [Migration("20250526004846_UseCaseFour")]
    partial class UseCaseFour
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.16");

            modelBuilder.Entity("EventManagement.Domain.Entities.Activity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Eventid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("duration")
                        .HasColumnType("REAL");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Eventid");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Eventid")
                        .HasColumnType("TEXT");

                    b.Property<string>("filters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("generatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Eventid");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("idPermission")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("idRole")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.RoleUser", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("idRole")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("idUser")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.RoleUserHistory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("changeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dateChange")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("userId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("userRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("RoleUserHistories");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Eventid")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Eventid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Activity", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Event", null)
                        .WithMany("Activities")
                        .HasForeignKey("Eventid");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Report", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Event", null)
                        .WithMany("Reports")
                        .HasForeignKey("Eventid");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Event", null)
                        .WithMany("Users")
                        .HasForeignKey("Eventid");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Event", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Reports");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}

## 📖 Descripción

Este proyecto demuestra cómo organizar un sistema .NET siguiendo los principios de la Arquitectura Limpia:

* **Separación de responsabilidades** entre capas (API, Infraestructura, Dominio, Aplicación).
* **Dependencias unidireccionales**: las capas superiores no conocen las inferiores.
* **Pruebas unitarias** sencillas en la lógica de negocio.
* **Persistencia** a través de EF Core sobre una base de datos SQLite local.

## ⚙️ Características

* API RESTful con controladores limpios y servicios desacoplados.
* Uso de **DTOs** y **patrón Mediator** para coordinar operaciones.
* Gestión de migraciones y semillas de datos.
* Integración con **SQLite** para entornos de desarrollo y pruebas.

## 🏗️ Arquitectura

```text
┌───────────┐      ┌─────────────┐      ┌──────────────┐
│   API     │────▶│ Application │────▶│   Domain     │
│ (Web/API) │      │  (Use cases)│      │ (Entidades)  │
└───────────┘      └─────────────┘      └──────────────┘
                         │
                         ▼
                   ┌─────────────┐
                   │ Infrastructure │
                   │ (EF Core, DB) │
                   └─────────────┘
```

Cada proyecto tiene responsabilidad única y se publica como paquete independiente (opcional).

## 📁 Estructura de carpetas

```text
/ src
│
├── Api                # Proyecto WebAPI (entrada de la aplicación)
├── Application        # Lógica de casos de uso y servicios
├── Domain             # Entidades, interfaces y reglas de negocio
└── Infrastructure     # Implementación de repositorios y EF Core

/tests                  # Pruebas unitarias
```

## 🛠️ Requisitos previos

* [.NET 7 SDK](https://dotnet.microsoft.com/download)
* SQLite (opcional para explorar la base de datos)
* [dotnet-ef CLI](https://docs.microsoft.com/ef/core/cli/dotnet)

## 🚀 Instalación

1. Clona el repositorio:

   ```bash
   git clone https://github.com/tu-usuario/tu-repo.git
   cd tu-repo
   ```

2. Restaura dependencias y construye:

   ```bash
   dotnet restore
   dotnet build --configuration Release
   ```

3. Instala o actualiza la herramienta de migraciones (`dotnet-ef`):

   ```bash
   # Si no la tienes instalada
   dotnet tool install --global dotnet-ef

   # O para actualizar
   dotnet tool update  --global dotnet-ef

   # Verifica versión
   dotnet ef --version
   ```

## ▶️ Uso

1. Ejecuta la API:

   ```bash
   cd EventManagement.Api
   dotnet run
   ```

2. La API quedará disponible en `https://localhost:5001` o `http://localhost:5000`.

3. Importa la colección de Postman o prueba con `curl`:

   ```bash
   curl -X GET https://localhost:5001/api/valores
   ```

## 🗄️ Mantenimiento de la base de datos

* **Crear migración**:

  ```bash
  dotnet ef migrations add <NombreMigracion> --project EventManagement.Infrastructure --startup-project EventManagement.Api
  ```

* **Actualizar base de datos**:

  ```bash
  dotnet ef database update --project EventManagement.Infrastructure --startup-project EventManagement.Api
  ```

* **Explorar SQLite**:
  Utiliza [DB Browser for SQLite](https://sqlitebrowser.org/) para abrir el archivo `EventManagement.Api/EventManagement.db`.

## 🤝 Contribuciones

1. Haz un *fork* del proyecto.
2. Crea una rama de características: `git checkout -b feature/mi-feature`
3. Realiza tus cambios y haz *commit*: `git commit -m "feat: descripción de cambio"`
4. Empuja tu rama: `git push origin feature/mi-feature`
5. Abre un *pull request* describiendo tus cambios.